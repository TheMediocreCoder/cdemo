---
- !user mike

- !user john

- !user cindy

- !user paul

- !user eva

- !group admins

- !group devops

- !group auditors

- !grant
  role: !group admins
  members:
   - !user mike
   - !user eva

- !grant
  role: !group devops
  members:
   - !user john
   - !user paul

- !grant
  role: !group auditors
  members:
   - !user cindy

- !permit
  role: !group admins
  privileges:
   - read
   - update
   - create
  resources:
   - !policy root

- !policy
  id: secrets
  owner: !group admins

- !policy
  id: jenkins
  owner: !group admins

- !policy
  id: tomcat
  owner: !group admins

- !policy
  id: webapp
  owner: !group admins

- !policy
  id: ansible
  owner: !group admins

- !policy
  id: conjur/authn-k8s/okd-follower
  owner: !group /admins
  annotations:
    description: Namespace defs for the Conjur cluster in dev
  body:
  - !webservice
    annotations:
      description: authn service for cluster
  - !policy
    id: ca
    body:
    - !variable
      id: cert
      annotations:
        description: CA cert for Kubernetes Pods.
    - !variable
      id: key
      annotations:
        description: CA key for Kubernetes Pods.
  - !policy
    id: apps
    owner: !group /admins
    annotations:
      description: Identities permitted to authenticate
    body:
    - !layer
      annotations:
        description: Layer of authenticator identities permitted to call authn svc
    - &hosts
      - !host
        id: summon-app/*/*
        annotations:
          kubernetes/authentication-container-name: authenticator
          openshift: "true"
      - !host
        id: summon-app/service_account/summon-app-service-account
        annotations:
          kubernetes/authentication-container-name: authenticator
          openshift: "true"
    - !grant
      role: !layer
      members: *hosts
  - !permit
    resource: !webservice
    privilege: [ read, authenticate ]
    role: !layer /conjur/authn-k8s/okd-follower/apps

- !policy
  id: test-app
  owner: !group /admins
  annotations:
    description: This policy connects authn identities to an application identity. It defines a layer named for an application that contains the whitelisted identities that can authenticate to the authn-k8s endpoint. Any permissions granted to the application layer will be inherited by the whitelisted authn identities, thereby granting access to the authenticated identity.
  body:
  - !layer

  - !grant
    role: !layer
    members:
    - !layer /conjur/authn-k8s/okd-follower/apps

- !policy 
  id: conjur/authn-iam/prod
  owner: !group /admins
  body:
    - !webservice

    - !group clients

    - !permit
      role: !group clients
      privileges: [ read, authenticate ]
      resource: !webservice

- !policy 
  id: myapp
  body:
  - &variables
    - !variable database/username
    - !variable database/password

  # Create a group that will have permission to retrieve variables
  - !group secrets-users

  # Give the `secrets-users` group permission to retrieve variables
  - !permit
    role: !group secrets-users
    privilege: [ read, execute ]
    resource: *variables
  
  # Create a layer to hold this application's hosts
  - !layer

  # The host ID needs to match the AWS ARN of the role we wish to authenticate.
  - !host 978458609324/MyApp

  # Add our host into our layer
  - !grant
    role: !layer
    member: !host 978458609324/MyApp

  # Give the host in our layer permission to retrieve variables
  - !grant
    member: !layer
    role: !group secrets-users
  
- !grant
  role: !group conjur/authn-iam/prod/clients
  member: !host myapp/978458609324/MyApp