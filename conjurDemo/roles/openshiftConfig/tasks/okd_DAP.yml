---
- name: login as system
  shell: |
    oc login -u system:admin
  
- name: Get registry IP
  shell: |
    oc get svc -n default | grep registry | awk '{print$3}'
  register: registry_ip

- name: Get registry Port
  shell: |
    oc get svc -n default | grep registry | awk '{print$5}' | tr -d '/TCP'
  register: registry_port

- name: login as developer
  shell: |
    oc login -u developer

- name: Check for registry being up
  shell: |
    docker login -u developer -p $(oc whoami -t) {{ registry_ip.stdout }}:{{ registry_port.stdout }}
  register: result
  until: result.stdout == 'Login Succeeded'
  retries: 60
  delay: 2

- name: Create new project for DAP and push image
  shell: |
    oc login -u developer
    oc new-project {{ dap_project_name }}
    docker tag $(docker image ls | grep conjur-appliance | awk '//{print$3}') {{ registry_ip.stdout }}:{{ registry_port.stdout }}/{{ dap_project_name }}/dap-appliance
    docker login -u developer -p $(oc whoami -t) {{ registry_ip.stdout }}:{{ registry_port.stdout }}
    docker push {{ registry_ip.stdout }}:{{ registry_port.stdout }}/{{ dap_project_name }}/dap-appliance

- name: Grant anyuid privileges to dap project default service account.
  shell: |
    oc login -u system:admin
    oc adm policy add-scc-to-user anyuid system:serviceaccount:{{ dap_project_name }}:default

- name: Start DAP
  shell: |
    oc login -u developer
    oc delete project myproject
    oc create -f {{ role_path }}/files/DAPFollower.yml
  args:
    chdir: /opt/openshift

- name: Configure DAP follower certificate
  shell: |
    docker exec {{ conjur_container_name }} evoke ca issue --force {{ okd_fqdn }}
    docker exec {{ conjur_container_name }} evoke ca issue --force {{ okd_follower_service }}
    docker exec {{ conjur_container_name }} chpst -u conjur conjur-plugin-service possum rake authn_k8s:ca_init["conjur/authn-k8s/okd-follower"]
  ignore_errors: true

- name: Create DAP seed file.
  shell: |
    docker exec {{ conjur_container_name }} evoke seed follower {{ okd_follower_service }}  > seed.tar
    oc create configmap seed --from-file seed.tar -o yaml --dry-run | oc replace -f -
    rm -f seed.tar
  args:
    chdir: /opt/openshift/

- name: Get follower pod name
  shell: |
    oc get pods | grep dap | awk '{print$1}'
  register: podName

- name: Delete current pod
  shell: |
    oc delete pod {{ item }}
  with_items:
    - "{{ podName.stdout_lines }}"

- pause:
    seconds: 10

- name: Get new follower pod name
  shell: |
    oc get pods | grep dap | awk '{print$1}'
  register: podName

- name: Grab DAP docker ip
  shell: |
    docker inspect {{ conjur_container_name }} | jq .[].NetworkSettings.IPAddress | tr -d \"
  register: dap_docker_ip

- name: set hosts file
  shell: |
    oc exec {{ item }} -i -t -- bash -c 'echo "{{ dap_docker_ip.stdout }} {{ conjur_container_name}}" >> /etc/hosts'
  with_items:
    - "{{ podName.stdout_lines }}"

- name: Unpack seed
  shell: |
    oc exec {{ item }} -- evoke unpack seed /seed/seed.tar
  with_items:
    - "{{ podName.stdout_lines }}"

- name: Configure follower
  shell: |
    oc exec {{ item }} -- evoke configure follower
  with_items:
    - "{{ podName.stdout_lines }}"
